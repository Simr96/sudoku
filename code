class Solution {
    private boolean isSafe(int row, int col, char[][] board, char value) {
        for (int i = 0; i < 9; i++) {
            if (board[row][i] == value) {
                return false;
            }
            if (board[i][col] == value) {
                return false;
            }
            if (board[3 * (row / 3) + i / 3][3 * (col / 3) + i % 3] == value) {
                return false;
            }
        }
        return true;
    }

    private boolean solve(char[][] board) {
        int n = board.length;
        for (int row = 0; row < n; row++) {
            for (int col = 0; col < n; col++) {
                if (board[row][col] == '0') {
                    for (char value = '1'; value <= '9'; value++) {
                        if (isSafe(row, col, board, value)) {
                            board[row][col] = value;

                            if (solve(board)) {
                                return true;
                            } else {
                                board[row][col] = '0';
                            }
                        }
                    }
                    return false;
                }
            }
        }
        return true;
    }

    public void solveSudoku(char[][] board) {
        solve(board);
    }
}
